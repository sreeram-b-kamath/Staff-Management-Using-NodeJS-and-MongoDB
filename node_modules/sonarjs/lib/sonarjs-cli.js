"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
* SonarJS-cli
* Copyright (C) 2017-2017 SonarSource SA
* mailto:info AT sonarsource DOT com
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program; if not, write to the Free Software Foundation,
* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
const analyzer_1 = require("./analyzer");
const yargs = require("yargs");
const argv = yargs
    .alias('h', 'help')
    .alias('v', 'version')
    .usage('Usage: sonarjs [options]')
    .example("sonarjs -e '**/test/**/*, **/*.test.js'", "Runs analysis excluding test files")
    .option('exclusions', {
    alias: 'e',
    describe: 'List of file path patterns to be excluded from analysis of JavaScript files.',
    type: 'string'
})
    .help('h')
    .argv;
const exclusions = argv.exclusions || "";
const projectHome = process.cwd();
const analyzingMessage = " Analyzing " + projectHome;
let animation;
const log = (message, logLevel) => {
    if (animation) {
        onEnd();
    }
    switch (logLevel) {
        case "INFO":
            console.log(message);
            break;
        case "WARN":
            console.warn(message);
            break;
        case "ERROR":
            console.error(message);
            break;
    }
    if (animation) {
        onStart();
    }
};
const onStart = () => {
    process.stdout.write("-" + analyzingMessage);
    animation = waitingAnimation();
};
const onEnd = () => {
    clearInterval(animation);
    // cleans last line
    process.stdout.write("\r\x1b[K\r");
};
run();
function run() {
    return __awaiter(this, void 0, void 0, function* () {
        const issues = yield analyzer_1.analyze(projectHome, { log, onStart, onEnd, exclusions });
        process.stdout.write("Finished analyzing " + projectHome + "\n");
        if (issues.length > 0) {
            issues.map(issue => console.log(issueView(issue)));
            process.exit(1);
        }
        else {
            console.log("No issues found");
            process.exit(0);
        }
    });
}
// From https://stackoverflow.com/questions/34848505/how-to-make-a-loading-animation-in-console-application-written-in-javascript-or
function waitingAnimation() {
    return (function () {
        var sprites = ["\\", "|", "/", "-"];
        var i = 0;
        return setInterval(function () {
            process.stdout.write("\r" + sprites[i++] + analyzingMessage);
            i &= 3;
        }, 250);
    })();
}
// exported for test purposes only
function issueView(issue) {
    return `${issue.severity} - ${issue.key.split(":")[1]}: ${issue.file} [${issue.pos.line}, ${issue.pos.column + 1}]: ${issue.message}`;
}
exports.issueView = issueView;
