"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
* SonarJS-cli
* Copyright (C) 2017-2017 SonarSource SA
* mailto:info AT sonarsource DOT com
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program; if not, write to the Free Software Foundation,
* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
const path = require("path");
const jre = require("./jre");
const child_process_1 = require("child_process");
const home = path.join(__dirname, "..", "lib");
const projectVersion = "0.1-SNAPSHOT"; // TODO make this dynamic somehow!
const jarFile = path.join(home, `mini-scanner-${projectVersion}.jar`);
function analyze(projectHome, { log = (message, logLevel) => { }, onStart = () => { }, onEnd = () => { }, exclusions = "" }) {
    return __awaiter(this, void 0, void 0, function* () {
        const driver = yield jre.install(log);
        onStart();
        const miniScanner = child_process_1.spawn(driver, [
            "-classpath",
            jarFile,
            `-Dsonarlint.home=${home}`,
            `-Dproject.home=${projectHome}`,
            "org.sonarsource.mini.scanner.Main",
            "--exclusions=" + exclusions
        ]);
        let result = "";
        return new Promise((resolve, reject) => {
            miniScanner.stdout.on("data", data => {
                result += data.toString();
            });
            miniScanner.stderr.on("data", data => {
                log(data.toString(), "ERROR");
            });
            miniScanner.on("close", code => {
                onEnd();
                resolve(JSON.parse(result).issues);
            });
        });
    });
}
exports.analyze = analyze;
// exported for test purposes only
function parseIssues(json) {
    return JSON.parse(json).issues;
}
exports.parseIssues = parseIssues;
